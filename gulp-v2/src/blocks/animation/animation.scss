//splitting css from npm
///* Recommended styles for Splitting */
//.splitting .word,
//.splitting .char {
//	display: inline-block;
//}
///* Psuedo-element chars */
//.splitting .char {
//	position: relative;
//}
///**
// * Populate the psuedo elements with the character to allow for expanded effects
// * Set to `display: none` by default; just add `display: block` when you want
// * to use the psuedo elements
// */
//.splitting .char::before,
//.splitting .char::after {
//	content: attr(data-char);
//	position: absolute;
//	top: 0;
//	left: 0;
//	visibility: hidden;
//	transition: inherit;
//	user-select: none;
//}
///* Expanded CSS Variables */
//.splitting {
//	/* The center word index */
//	--word-center: calc((var(--word-total) - 1) / 2);
//
//	/* The center character index */
//	--char-center: calc((var(--char-total) - 1) / 2);
//
//	/* The center character index */
//	--line-center: calc((var(--line-total) - 1) / 2);
//}
//
//.splitting .word {
//	/* Pecent (0-1) of the word's position */
//	--word-percent: calc(var(--word-index) / var(--word-total));
//
//	/* Pecent (0-1) of the line's position */
//	--line-percent: calc(var(--line-index) / var(--line-total));
//}
//
//.splitting .char {
//	/* Percent (0-1) of the char's position */
//	--char-percent: calc(var(--char-index) / var(--char-total));
//
//	/* Offset from center, positive & negative */
//	--char-offset: calc(var(--char-index) - var(--char-center));
//
//	/* Absolute distance from center, only positive */
//	--distance: calc(
//		(var(--char-offset) * var(--char-offset)) / var(--char-center)
//	);
//
//	/* Distance from center where -1 is the far left, 0 is center, 1 is far right */
//	--distance-sine: calc(var(--char-offset) / var(--char-center));
//
//	/* Distance from center where 1 is far left/far right, 0 is center */
//	--distance-percent: calc((var(--distance) / var(--char-center)));
//}

//.splitting .word {
//	display: inline-block;
//	white-space: nowrap;
//}
//.splitting .char {
//	display: inline-block;
//}
//.splitting .char {
//	position: relative;
//}
//
//[data-obs-name='mask'] {
//	mask-position: center;
//	mask-clip: no-clip;
//}
//
//%anim-dram {
//	overflow: hidden;
//	&:hover {
//		&>span {
//			transform: translateY(-120%);
//			&:after {
//				transform: translateY(0);
//			}
//		}
//	}
//	&>span {
//		position: relative;
//		display: inline-block;
//		transform: translateY(0);
//		transition: transform .3s ease;
//		&:after {
//			content: attr(data-text);
//			display: inline-block;
//			color: $green;
//			position: absolute;
//			top: 120%;
//			left: 0;
//		}
//	}
//}
//
//%btn-inline-arr {
//	position: relative;
//	transition: .4s ease;
//	transition-property: color;
//	&:hover {
//		&:after {
//			animation: txtShadow .4s linear;
//		}
//		svg {
//			fill: $green;
//			transform: translateX(-5px);
//		}
//	}
//	&:after {
//		content: attr(data-text);
//		position: absolute;
//		top: 0;
//		left: 0;
//		color: rgba(0,0,0,0);
//	}
//	svg {
//		transition: .4s ease;
//		transition-property: transform, fill;
//	}
//}
//@keyframes txtShadow {
//	0% {
//		text-shadow: 0 0 0 $text-color;
//		transform: scale(1);
//		opacity: 1;
//	}
//	100% {
//		text-shadow: 0 0 4px $text-color;
//		transform: scale(2);
//		opacity: 0;
//	}
//}